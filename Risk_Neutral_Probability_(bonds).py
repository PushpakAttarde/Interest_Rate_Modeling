# -*- coding: utf-8 -*-
"""Risk Neutral Probability (Bonds).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a0TTakY-4Qab7P1rSr8SvFRFSNEM0ttF
"""

#Risk Neutral Probability = It must be such that the expected returns on all assets are same
#example ---->
#expected return of 1-year maturity zero coupon bond  = expected return of 2 year maturity zero coupon bond for 1 year
#Arbitrage = free evolution of bond price is dependent on risk neutral probability

import numpy as np

par_value = float(input("Enter the par value of the bond: "))
interest_rate_year1 = float(input("Enter the 1-year maturity interest rate: "))
interest_rate_year2 = float(input("Enter the 2-year maturity interest rate: "))
interest_rate_year3 = float(input("Enter the 3-year maturity interest rate: "))

r_u = float(input("Enter the upward movement interest rate (r_u): "))
r_d = float(input("Enter the downward movement interest rate (r_d): "))
r_uu = float(input("Enter the upward-upward movement interest rate (r_uu): "))
r_ud = float(input("Enter the upward-downward movement interest rate (r_ud): "))
r_dd = float(input("Enter the downward-downward movement interest rate (r_dd): "))


#First, Consider 2 year zero coupon bond
BP_u = 100 / (1 + r_u)
BP_d = 100 / (1 + r_d)

return_up = (BP_u / initial_price_year2) - 1
return_down = (BP_d / initial_price_year2) - 1

#Let p1 be the risk neutral probability of the upward movement of the interest rate and (1-p1) will be for downward movement
#Expected return after 1 year for 2 year maturity zero coupon bond i.e
#interest_rate_year1 = (p1 * return_up) + (1-p1) * return_down

p1 = (return_down - interest_rate_year1) / (return_down - return_up)

print(f"Risk Neutral Probability_Up: {p1:.4f}")
print(f"Risk Neutral Probability_Down: {(1-p1):.4f}")
print(f"Bond_price(Up): {BP_u:.2f}")
print(f"Bond_price(Down): {BP_d:.2f}")

#Solve for 3 year maturity zero coupon bond
from sympy import symbols, Eq, nsolve

B_u, B_d, p2 = symbols('B_u, B_d, p2', real=True, positive=True)

B_uu = 100 / (1 + r_uu)
B_ud = 100 / (1 + r_ud)
B_dd = 100 / (1 + r_dd)

eq1 = Eq(interest_rate_year1, (p1 * ((B_u / initial_price_year3) - 1)) + ((1-p1) * ((B_d / initial_price_year3) - 1)))

#Let p2 be the risk neutral probability of the upward movement of the interest rate and (1-p2) will be for downward movement
eq2 = Eq(r_u, p2 * ((B_uu / B_u) - 1) + (1-p2) * ((B_ud / B_u) -1))

eq3 = Eq(r_d, p2 * ((B_ud / B_d) - 1) + (1-p2) * ((B_dd / B_d) -1))

initial_guess = (85, 85, 0.5)
sol = nsolve((eq1, eq2, eq3), (B_u, B_d, p2), initial_guess)

B_u_value = sol[0]
B_d_value = sol[1]
p2_value = sol[2]

print(f"Risk Neutral Probability_Up: {p2_value:.4f}")
print(f"Risk Neutral Probability_Down: {(1-p2_value):.4f}")
print(f"Bond_price(Up): {B_u_value:.2f}")
print(f"Bond_price(Down): {B_d_value:.2f}")
print(f"Bond_price(Up-Up): {B_uu:.2f}")
print(f"Bond_price(Up-Down): {B_ud:.2f}")
print(f"Bond_price(Down-Down): {B_dd:.2f}")